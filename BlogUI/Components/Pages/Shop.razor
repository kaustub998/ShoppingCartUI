@page "/"

@using EcorpAPI.Models
@using EcorpUI.Models
@using EcorpUI.Services
@using Blazored.LocalStorage;
@using Pages.Cart.Modals;

@inject ItemService itemService
@inject CartService cartService
@inject NavigationManager navigationManager
@inject Common common
@inject ILocalStorageService localStorage

<style>
    .item-card {
        margin: 0; /* Remove margin if there's any */
    }

    .card {
        margin-bottom: 0; /* Remove bottom margin from cards */
    }
</style>

<div>
    <div class="container">
        <div class="row justify-content-start">
            <div class="col-md-4 col-sm-6 col-12 mb-3">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search..." @bind="searchString" />
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="HandleSearch">Search</button>
                        <button class="btn btn-secondary" @onclick="ClearSearch">Clear</button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="blogs-container">
        @if (paginatedItems != null)
        {
            <div class="container">
                <div class="row">
                    @foreach (var item in paginatedItems)
                    {
                        <div class="col-md-3 col-sm-6 mb-3">
                            <div class="item-card card shadow-sm">
                                @* <img src="@($"data:image/png;base64,{Convert.ToBase64String(item.itemImageList.FirstOrDefault()?.image)}")" class="card-img-top" alt="@item.itemName" style="height: 180px; object-fit: cover;" /> *@
                                <img src="@(!string.IsNullOrEmpty(Convert.ToBase64String(item.itemImageList?.FirstOrDefault()?.image ?? Array.Empty<byte>()))
                                          ? $"data:image/png;base64,{Convert.ToBase64String(item.itemImageList?.FirstOrDefault()?.image)}"
                                           : "path-to-placeholder-image.png")"
                                     class="card-img-top"
                                     alt="@item.itemName"
                                     style="height: 180px; object-fit: cover;" />

                                <div class="card-body">
                                    <h5 class="card-title">@item.itemName</h5>
                                    <p class="card-text text-muted">@item.itemDescription</p>
                                    <p class="card-text"><strong>By:</strong> @item.user_FullName</p>
                                    <p class="card-text"><strong>Quantity:</strong> @item.itemQuantity</p>
                                    <p class="card-text"><strong>Rate:</strong> $ @item.itemRate.ToString("F2")</p>

                                    <div class="d-flex justify-content-between align-items-center mt-3">
                                        <a href="@($"itemDetail?id={item.itemId}")" class="btn btn-outline-primary btn-sm">Read More</a>
                                        <button class="btn btn-primary btn-sm" @onclick="@(() => OpenAddToCartModal(item))">Add to Cart</button>

                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <p>No Item found.</p>
        }
    </div>

    @if (totalPages > 1)
    {
        <div class="pagination">
            @for (int i = 1; i <= totalPages; i++)
            {
                int pageIndex = i;

                <button @onclick="() => NavigateToPage(pageIndex)" class="@(pageIndex == currentPage ? "active" : "")">@pageIndex</button>
            }
        </div>
    }
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private IEnumerable<Item> items { get; set; }
    private UserContext userContext = new UserContext();

    private int pageSize = 10;
    private int currentPage = 1;
    private int totalPages;
    private IEnumerable<Item> paginatedItems;
    private string searchString = "";


    private async Task OpenAddToCartModal(Item item)
    {
        var parameters = new ModalParameters()
            .Add(nameof(Cart.Modals.AddToCartModal.item), item)
            .Add(nameof(AddToCartModal.Callback), EventCallback.Factory.Create<string>(this, CallBack));
        var options = new ModalOptions()
            {
                Size = ModalSize.Small
            };
        Modal.Show<AddToCartModal>("Add to Cart", parameters, options);
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
    }

    private void CalculateTotalPages()
    {
        totalPages = (int)Math.Ceiling((double)items.Count() / pageSize);
    }

    void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchString))
        {
            var filteredItems = items
                .Where(item => item.itemName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                               item.user_FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                .ToList();

            totalPages = (int)Math.Ceiling(filteredItems.Count() / (double)pageSize);
            currentPage = 1; // Reset to first page after search
            paginatedItems = filteredItems.Skip((currentPage - 1) * pageSize).Take(pageSize);
        }
        else
        {
            paginatedItems = items.Skip((currentPage - 1) * pageSize).Take(pageSize);
        }

        StateHasChanged();
    }

    void ClearSearch()
    {
        paginatedItems = items;
        searchString = "";
    }

    // Handle navigation to different pages
    void NavigateToPage(int page)
    {
        currentPage = Math.Max(1, Math.Min(page, totalPages)); // Ensure currentPage is within bounds
        paginatedItems = items.Skip((currentPage - 1) * pageSize).Take(pageSize);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userContext = await common.GetUserContext();
            if (userContext.isDeactivated == true)
            {
                await localStorage.RemoveItemAsync("userContext");
                navigationManager.NavigateTo("/", forceLoad: true);
            }
            await GetItemList();
            CalculateTotalPages();
            NavigateToPage(1);
            StateHasChanged();
        }
    }

    public async Task GetItemList()
    {
        items = await itemService.GetItemsListForShopPage();
    }

    public async Task CallBack(string? message)
    {
        if (message == "success")
        {
            await GetItemList();
            StateHasChanged();
        }
    }
}

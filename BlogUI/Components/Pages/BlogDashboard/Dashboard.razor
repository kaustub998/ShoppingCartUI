@page "/BlogDashboard/dashboard"

@using EcorpUI.Models
@using EcorpUI.Services
@using Blazored.LocalStorage;
@using EcorpUI.Components.Pages.BlogDashboard.Modals;

@inject ItemService itemService
@inject CartService cartService
@inject Common common
@inject NavigationManager navManager
@inject IModalService modal
@inject ILocalStorageService localStorage

<style>
    .item-card {
        margin: 0; /* Remove margin if there's any */
    }

    .card {
        margin-bottom: 0; /* Remove bottom margin from cards */
    }
</style>
<div>
    <div class="d-flex justify-content-end mb-3">
        <RadzenButton Text="Add Item" Click="@AddBlog" Style="margin-right: 10px;" />
    </div>
    @if (items != null && items.Any())
    {

        <div class="container">
            <div class="row">
                @foreach (var item in items)
                {
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="item-card card shadow-sm">
                            @* <img src="@($"data:image/png;base64,{Convert.ToBase64String(item.itemImageList.FirstOrDefault()?.image)}")" class="card-img-top" alt="@item.itemName" style="height: 180px; object-fit: cover;" /> *@
                            <img src="@(!string.IsNullOrEmpty(Convert.ToBase64String(item.itemImageList.FirstOrDefault()?.image ?? Array.Empty<byte>()))
                                              ? $"data:image/png;base64,{Convert.ToBase64String(item.itemImageList.FirstOrDefault()?.image)}"
                                             : "path-to-placeholder-image.png")"
                                 class="card-img-top"
                                 alt="@item.itemName"
                                 style="height: 180px; object-fit: cover;" />

                            <div class="card-body">
                                <h5 class="card-title">@item.itemName</h5>
                                <p class="card-text"><strong>Description:</strong> @item.itemDescription</p>
                                <p class="card-text"><strong>Rate:</strong> @item.itemRate</p>
                                <p class="card-text"><strong>stock level:</strong> @item.itemQuantity</p>
                                <p class="card-text"><strong>By:</strong> @item.user_FullName</p>

                                <div class="d-flex justify-content-between align-items-center mt-3">
                                    <a href="/itemDetail?id=@item.itemId" class="btn btn-outline-primary btn-sm">Read More</a>
                                    <div>
                                        @if (userContext.userRoleId == true || userContext.userId == item.userId)
                                        {
                                            <RadzenIcon Icon="edit" Title="Edit" @onclick="@(() => UpdateHandler(item))" Style="font-weight: 400; cursor:pointer;" />
                                            <RadzenIcon Icon="delete" Title="Delete" @onclick="@(() => DeleteHandler(item))" Style="font-weight: 400; cursor:pointer;" />
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <p>No item found.</p>
    }
</div>
@if (soldItems != null)
{
    @if (soldItems.Count() > 0)
    {
        <div>
            <div>
                Items Sold
            </div>
            <div>
                <RadzenGrid TItem="ConfirmedOrder" Data="@soldItems">
                    <Columns>
                        @*  <RadzenGridColumn TItem="ConfirmedOrder" Property="image" Title="Image">
                        <Template Context="data">
                            @{
                                @if (data.image != null)
                                {
                                    <div class="form-group">
                                        <img src="data:image/png;base64,@Convert.ToBase64String(data.image)" alt="User Image" style="width:150px; height:150px; object-fit:cover;" />
                                    </div>
                                }
                            }
                        </Template>
                    </RadzenGridColumn> *@
                        <RadzenGridColumn TItem="ConfirmedOrder" Property="buyerName" Title="Buyer" />
                        <RadzenGridColumn TItem="ConfirmedOrder" Property="itemName" Title="Item" />
                        <RadzenGridColumn TItem="ConfirmedOrder" Property="quantity" Title="Quantity" />
                        <RadzenGridColumn TItem="ConfirmedOrder" Property="rate" Title="Rate" />
                        <RadzenGridColumn TItem="ConfirmedOrder" Property="total" Title="Total" />
                    </Columns>
                </RadzenGrid>
            </div>
        </div>
    }
}
@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private UserContext userContext = new UserContext();
    private IEnumerable<Item> items { get; set; } = new List<Item>();
    private IEnumerable<ConfirmedOrder> soldItems { get; set; } = new List<ConfirmedOrder>();


    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userContext = await common.GetUserContext();
            if (userContext.isDeactivated == true)
            {
                await localStorage.RemoveItemAsync("userContext");
                navManager.NavigateTo("/", forceLoad: true);
            }
            if (userContext.userId > 0)
            {
                await GetItemList();
                StateHasChanged();
            }
            else
            {
                navManager.NavigateTo("/");
            }
        }
    }

    public async Task GetItemList()
    {
        items = await itemService.GetItemListForDashboard();
    }

    public async Task GetItemSoldDetail()
    {
        soldItems = await cartService.GetItemSoldDetails();
    }

    private async Task DeleteHandler(Item args)
    {
        await itemService.DeleteItem(args);
        await GetItemList();
        StateHasChanged();
    }

    private async Task UpdateHandler(Item args)
    {
        var parameters = new ModalParameters()
            .Add(nameof(AddEditItem.item), args)
            .Add(nameof(AddEditItem.Callback), EventCallback.Factory.Create<string>(this,
        CallBack));

        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        Modal.Show<AddEditItem>("Edit Item", parameters, options);
    }

    public async Task CallBack(string? message)
    {
        if (message == "success")
        {
            await GetItemList();
            StateHasChanged();
        }
    }

    private async Task AddBlog()
    {
        var parameters = new ModalParameters()
            .Add(nameof(AddEditItem.Callback), EventCallback.Factory.Create<string>(this,
        CallBack));

        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        Modal.Show<AddEditItem>("Add Item", parameters, options);
    }
}

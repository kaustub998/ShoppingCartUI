@page "/cart"
@using EcorpAPI.Models
@using EcorpUI.Services
@using EcorpUI.Extensions;

@inject CartService CartService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsruntime


<h3>Shopping Cart</h3>

@if (cartItems == null)
{
    <p>Loading...</p>
}
else if (!cartItems.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <RadzenDataGrid Data="@cartItems" TItem="CartItemModel" ColumnWidth="200px" Class="table">
        <Columns>
            <RadzenDataGridColumn TItem="CartItemModel" Property="image" Title="Image">
                <Template Context="data">
                    @{
                        @if (data.itemImageList != null && data.itemImageList.Count() > 0)
                        {
                            <div class="form-group">
                                <img src="@($"data:image/png;base64,{Convert.ToBase64String(data.itemImageList.FirstOrDefault().image)}")" class="card-img-top" alt="@data.itemName" style="height: 180px; object-fit: cover;" />
                            </div>
                        }
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="CartItemModel" Property="itemName" Title="Item" />
            <RadzenDataGridColumn TItem="CartItemModel" Property="itemRate" Title="Price"/>
            <RadzenDataGridColumn TItem="CartItemModel" Title="Quantity">
                <Template Context="item">
                    <div class="d-flex align-items-center">
                        <RadzenButton Icon="remove"
                                      ButtonStyle="ButtonStyle.Light"
                                      Class="mr-1"
                                      Click="@(() => DecrementQuantity(item))"
                                      Disabled="@(item.quantity <= 1)" />

                        <RadzenNumeric TValue="int"
                                       Value="@(item.quantity ?? 1)"
                                       Change="@(value => UpdateQuantity(item, value))"
                                       Min="1"
                                       Max="99"
                                       Style="width: 70px;" />

                        <RadzenButton Icon="add"
                                      ButtonStyle="ButtonStyle.Light"
                                      Class="ml-1"
                                      Click="@(() => IncrementQuantity(item))"
                                      Disabled="@(item.quantity >= 99)" />
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CartItemModel" Title="Total">
                <Template Context="item">
                    @((item.itemRate * item.quantity).ToString())
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="CartItemModel" Title="Actions">
                <Template Context="item">
                    <RadzenButton Text="Remove" Icon="close" Click="@(args => RemoveCart(item))" ButtonStyle="ButtonStyle.Danger" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
        <FooterTemplate>
            <div style="background-color: #f8f9fa; padding: 15px; border-top: 1px solid #dee2e6; display: flex; justify-content: space-between; align-items: center;">
                <span style="font-size: 1.2em; font-weight: bold;">Total:</span>
                <span style="font-size: 1.5em; font-weight: bold; color: #28a745;">
                    @(cartTotal.HasValue ? cartTotal.Value.ToString("C") : "$0.00")
                </span>
            </div>
        </FooterTemplate>

    </RadzenDataGrid>

    <RadzenButton Text="Proceed to Checkout" Icon="payment" Click="Checkout" ButtonStyle="ButtonStyle.Primary" />
}
@code {

    private IEnumerable<CartItemModel> cartItems=new List<CartItemModel>();
    private decimal? cartTotal;
    private int userId = 1; 

    protected override async Task OnInitializedAsync()
    {
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            StateHasChanged();
        }
    }

    private async Task UpdateQuantity(CartItemModel item, int? newQuantity)
    {
        item.quantity = newQuantity;
        var response = await CartService.AddToCart(item);
        if (response != null && response.isSuccess == true)
        {
            await LoadCart();
        }
        else
        {
            Console.WriteLine("Failed to update the cart item quantity.");
        }
    }
    private async Task DecrementQuantity(CartItemModel item)
    {
        if (item.quantity > 1)
        {
            item.quantity--;
            await UpdateQuantity(item, item.quantity ?? 0);
        }
    }

    private async Task IncrementQuantity(CartItemModel item)
    {
        if (item.quantity < 99)
        {
            item.quantity++;
            await UpdateQuantity(item, item.quantity ?? 0);
        }
    }

    private async Task LoadCart()
    {
        cartItems = await CartService.GetCartItemsAsync(userId);
        cartTotal = await CartService.GetCartTotalAsync(userId);
        StateHasChanged();
    }


    private async Task RemoveCart(CartItemModel cartItem)
    {
        if (cartItem.cartItemId > 0)
        {
           
            var response = await CartService.RemoveCart(cartItem);

            if (response.isSuccess == true)
            {
                await LoadCart(); 
            }

            else
            {
            }
        }
    }

    private async Task Checkout()
    {
        var response = await CartService.CheckoutCart();
        if(response.isSuccess == true)
        {
            jsruntime.ToastrSuccess(response.message);
        }
        else
        {
            jsruntime.ToastrError(response.message);
        }
    }
}
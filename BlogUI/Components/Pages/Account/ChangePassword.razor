@page "/account/ChangePassword"

@using EcorpUI.Models;
@using EcorpUI.Services;
@using System.Text.Json;
@using System.Text;
@using Blazored.Toast.Services;
@using EcorpUI.Extensions;
@using Microsoft.JSInterop
@using Blazored.LocalStorage;

@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject NavigationManager NavigationManager
@inject IJSRuntime jsruntime
@inject ILocalStorageService localStorage
@inject Common common
@inject RegisterLoginService registerService

<style>
    .form-container {
        height: calc(100vh - 6rem);
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    }

    .form-box {
        width: 350px;
        padding: 30px;
        background-color: #ffd;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .login-header {
        text-align: center;
        margin-bottom: 30px;
        color: #333;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        width: 100%;
        padding: 12px 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
    }

    .btn-link {
        color: #666;
        font-size: 14px;
        text-decoration: none;
    }

        .btn-link:hover {
            text-decoration: underline;
        }

</style>

<EditForm Model="@changePassword" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-container">
        <div class="form-box">
            <!-- No header for the second form -->
            <div class="form-group">
                <label for="currentPassword">Current Password</label>
                <input type="password" id="currentPassword" @bind-value="changePassword.CurrentPassword" class="form-control" />
                <ValidationMessage For="() => changePassword.CurrentPassword"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password</label>
                <input type="password" id="newPassword" @bind-value="changePassword.Password" class="form-control" />
                <ValidationMessage For="() => changePassword.Password"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password</label>
                <input type="password" id="confirmNewPassword" @bind-value="changePassword.ConfirmPassword" class="form-control" />
                <ValidationMessage For="() => changePassword.ConfirmPassword"></ValidationMessage>
            </div>
            <div class="form-group">
                <!-- Removed the column layout for the button -->
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" class="btn btn-primary">Save</RadzenButton>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private ChangePasswordModel changePassword = new ChangePasswordModel();
    private UserContext userContext = new UserContext();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userContext = await common.GetUserContext();
            if (userContext.isDeactivated == true)
            {
                await localStorage.RemoveItemAsync("userContext");
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        changePassword.UserId = userContext.userId;
        bool code = await registerService.ChangePassword(changePassword);

        if (code == true)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
        }
    }

}

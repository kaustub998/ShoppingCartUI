@page "/account/register"

@using EcorpUI.Models;
@using EcorpUI.Services;
@using System.Text.Json;
@using System.Text;
@using Blazored.Toast.Services;
@using System.Globalization;
@using System.ComponentModel.DataAnnotations;
@using EcorpUI.Extensions;

@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject NavigationManager NavManager
@inject IJSRuntime jsruntime
@inject Common common

<style>
    .form-container {
        height: calc(100vh - 3.5rem);
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    }

    .form-box {
        width: 550px; /* Increased width to accommodate two columns */
        padding: 30px;
        background-color: #ffd;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 20px;
    }

    .custom-checkbox {
        width: 20px;
        height: 20px;
    }

    .form-control {
        width: 100%;
        padding: 12px 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
    }

    .btn-link {
        color: #666;
        font-size: 14px;
        text-decoration: none;
    }

        .btn-link:hover {
            text-decoration: underline;
        }

</style>

<EditForm Model="userDetail" FormName="UserRegister" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-container">
        <div class="form-box">
            <h1 class="login-header">User Register</h1>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="firstName">First Name</label>
                        <InputText class="form-control" type="text" id="firstName" @bind-Value="userDetail.firstName" placeholder="Enter first name" />
                        <ValidationMessage For="@(() => userDetail.firstName)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="lastName">Last Name</label>
                        <InputText class="form-control" type="text" id="lastName" @bind-Value="userDetail.lastName" placeholder="Enter last name" />
                        <ValidationMessage For="@(() => userDetail.lastName)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText type="email" class="form-control" id="email" @bind-Value="userDetail.email" placeholder="Enter email" />
                        <ValidationMessage For="@(() => userDetail.email)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="password">Password</label>
                        <InputText type="password" class="form-control" id="password" @bind-Value="userDetail.password" placeholder="Enter password" />
                        <ValidationMessage For="@(() => userDetail.password)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="dateOfBirth">Date of Birth</label>
                        <InputDate class="form-control" id="dateOfBirth" @bind-Value="userDetail.dateOfBirth" />
                        <ValidationMessage For="@(() => userDetail.dateOfBirth)" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Gender</label>
                        <div>
                            <label>
                                <InputRadioGroup @bind-Value="userDetail.gender">
                                    <InputRadio Value="0" />
                                    Male
                                </InputRadioGroup>
                            </label>
                        </div>
                        <div>
                            <label>
                                <InputRadioGroup @bind-Value="userDetail.gender">
                                    <InputRadio Value="1" />
                                    Female
                                </InputRadioGroup>
                            </label>
                        </div>
                        <ValidationMessage For="@(() => userDetail.gender)" />
                    </div>
                </div>
            </div>
            @if (userContext.userRoleId == true)
            {
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group d-flex align-items-center gap-2">
                            <label for="isAdmin" class="mr-2">Is Admin</label>
                            <div class="custom-control m">
                                <InputCheckbox id="isAdmin" class="custom-checkbox mt-1" @bind-Value="userDetail.isAdmin" />
                            </div>
                            <ValidationMessage For="@(() => userDetail.isAdmin)" />
                        </div>
                    </div>
                </div>
            }

            <button type="submit" class="btn btn-primary">Register</button>
        </div>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private UserDetails userDetail { get; set; } = new UserDetails();
    private UserContext userContext = new UserContext();

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userContext = await common.GetUserContext();
            if (userContext.userId > 0)
            {
                if (userContext.userRoleId == true)
                {

                }
                else
                {
                    NavManager.NavigateTo("/");
                }
            }

            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        HttpClient httpClient = new HttpClient();
        var requestUrl = config["APIBaseUrl"] + "account/register";

        using StringContent jsonContent = new(
        JsonSerializer.Serialize(new
        {
            FirstName = userDetail.firstName,
            LastName = userDetail.lastName,
            IsAdmin = userDetail.isAdmin,
            Password = userDetail.password,
            Email = userDetail.email,
            DateOfBirth = userDetail.dateOfBirth,
            Gender = userDetail.gender,
            ContactNumber = userDetail.contactNumber
        }),
        Encoding.UTF8,
        "application/json");

        HttpResponseMessage response = await httpClient.PostAsync(requestUrl, jsonContent);
        httpClient.Dispose();

        using var responseStream = await response.Content.ReadAsStreamAsync();
        ResponseModel responseModel = await JsonSerializer.DeserializeAsync<ResponseModel>(responseStream);

        if (responseModel.isSuccess == true)
        {
            jsruntime.ToastrSuccess("User Created Successfully!!!");
            NavManager.NavigateTo("/account/login");
        }
        else
        {
            jsruntime.ToastrError(responseModel.message);
        }
    }
}

@page "/account/ResetPassword"

@using EcorpUI.Models;
@using System.Text.Json;
@using System.Text;
@using Blazored.Toast.Services;
@using EcorpUI.Extensions;
@using Microsoft.JSInterop

@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject NavigationManager NavigationManager
@inject IJSRuntime jsruntime

<style>
    .form-container {
        height: calc(100vh - 6rem);
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    }

    .form-box {
        width: 350px;
        padding: 30px;
        background-color: #ffd;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .login-header {
        text-align: center;
        margin-bottom: 30px;
        color: #333;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        width: 100%;
        padding: 12px 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
    }

    .btn-link {
        color: #666;
        font-size: 14px;
        text-decoration: none;
    }

        .btn-link:hover {
            text-decoration: underline;
        }

</style>

<EditForm Model="@resetPassword" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-container">
        <div class="form-box">
            <!-- No header for the second form -->
            <div class="form-group">
                <label for="password">New Password</label>
                <input type="password" id="password" @bind-value="resetPassword.password" class="form-control" />
                <ValidationMessage For="() => resetPassword.password"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <input type="password" id="confirmPassword" @bind-value="resetPassword.ConfirmPassword" class="form-control" />
                <ValidationMessage For="() => resetPassword.ConfirmPassword"></ValidationMessage>
            </div>
            <div class="form-group">
                <!-- Removed the column layout for the button -->
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" class="btn btn-primary">Save</RadzenButton>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private ResetPasswordModel resetPassword = new ResetPasswordModel();

    private string resetToken = string.Empty;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            if (queryParams.TryGetValue("token", out var token))
            {
                resetToken = token;
            }
        }

    }

    private async Task HandleValidSubmit()
    {
        HttpClient httpClient = new HttpClient();
        var requestUrl = config["APIBaseUrl"] + "account/resetpassword";

        using StringContent jsonContent = new(
            JsonSerializer.Serialize(new
            {
                resetToken = resetToken,
                password = resetPassword.password,
            }),
            Encoding.UTF8,
            "application/json");

        HttpResponseMessage response = await httpClient.PostAsync(requestUrl, jsonContent);

        httpClient.Dispose();
        using var responseStream = await response.Content.ReadAsStreamAsync();
        if (responseStream.Length > 0)
        {
            ResponseModel responseModel = await JsonSerializer.DeserializeAsync<ResponseModel>(responseStream);
            if (responseModel.isSuccess.HasValue && responseModel.isSuccess.Value)
            {
                jsruntime.ToastrSuccess("Password Reset Successful!!!");
                NavigationManager.NavigateTo("/account/Login");
            }
        }
        else
        {
            jsruntime.ToastrError("Something went wrong !!!");
        }

    }
}
